<annotatedpaper>
    <paper title= "Generalized Expectation Criteria for Semi-Supervised Learning of Conditional Random Fields" authors="Gideon S. Mann and Andrew McCallum" year="2008">
        <section>
            Gideon S. Mann
            Google Inc.
            76 Ninth Avenue
            New York, NY 10011
            Andrew McCallum
            Department of Computer Science
            University of Massachusetts
            140 Governors Drive
            Amherst, MA 01003
        </section>
        <section>
            Abstract
            This paper presents a semi-supervised training method for linear-chain conditional random fields that makes use of labeled features rather than labeled instances. This is accomplished by using generalized expectation criteria to express a preference for parameter settings in which the model's distribution on unlabeled data matches a target distribution. We induce target conditional probability distributions of labels given features from both annotated feature occurrences in context and ad-hoc feature majority label assignment. The use of generalized expectation criteria allows for a dramatic reduction in annotation time by shifting from traditional instance-labeling to feature-labeling, and the methods presented outperform traditional CRF training and other semi-supervised methods when limited human effort is available.
        </section>
        <section imrad="i">
            <title>
                1 Introduction
            </title>
            <paragraph>
                A significant barrier to applying machine learning to new real world domains is the cost of obtaining the necessary training data. To address this problem, work over the past several years has explored semi-supervised or unsupervised approaches to the same problems, seeking to improve accuracy with the addition of lower cost unlabeled data.
                <context>
                    <kw>Traditional</kw> 
                    <method>approaches</method> to semi-supervised learning <kw>are applied to</kw> 
                    <data>cases</data> in which <feature>there is a small amount of fully labeled data</feature> and a much larger amount of un-labeled data, presumably from the same data source. For example, EM (<cite id="1" function="use" polarity="neu">Nigam et al., 1998</cite>), transduc-tive SVMs (<cite id="2" function="use" polarity="neu">Joachims, 1999</cite>), entropy regularization (<cite id="3" function="use" polarity="neu">Grandvalet and Bengio, 2004</cite>),
                </context>
                and graph-based Traditional Full Instance Labeling Feature Labeling address : *number* oak avenue rent $ .... ADDRESS .. ( please include the address of this rental ) CONTACT ... pm . address : *number* marie street sausalito ... .. laundry . address : *number* macarthur blvd .... Conditional Distribution of Labels Given Word=address 
                
                Figure 1: Top: Traditional instance-labeling in which sequences of contiguous tokens are annotated as to their correct label. Bottom: Feature-labeling in which noncontiguous feature occurrences in context are labeled for the purpose of deriving a conditional probability distribution of labels given a particular feature.
            </paragraph>
            <paragraph>
                <context>
                    <method>Methods</method> (<cite id="4" function="use" polarity="pos">Zhu and Ghahramani, 2002</cite>; <cite id="5" function="use" polarity="pos">Szummer and Jaakkola, 2002</cite>) <kw>have all been applied to</kw> 
                    <negfeature>a limited amount </negfeature> 
                    <kw>of</kw> 
                    <data>fully labeled data</data> in conjunction with un-labeled data <kw>to</kw> 
                    <posfeature>improve the accuracy</posfeature> of a classifier.
                </context>
            </paragraph>
            <paragraph>
                In this paper, we explore an alternative approach in which, instead of fully labeled instances, the learner has access to labeled features. These features can often be labeled at a lower-cost to the human annotator than labeling entire instances, which may require annotating the multiple sub-parts of a sequence structure or tree. Features can be labeled either by specifying the majority label for a particular feature or by annotating a few occurrences of a particular feature in context with the correct label (Figure 1).
            </paragraph>
            <paragraph>
                To train models using this information we use generalized expectation (GE) criteria. GE criteria are terms in a training objective function that assign scores to values of a model expectation. In particular we use a version of GE that prefers parameter settings in which certain model expectations are close to target distributions. Previous work has shown how to apply GE criteria to maximum entropy classifiers. In section 4, we extend GE criteria to semi-supervised learning of linear-chain conditional random fields, using conditional probability distributions of labels given features.
            </paragraph>
            <paragraph>
                To empirically evaluate this method we compare it with several competing methods for CRF training, including entropy regularization and expected gradient, showing that GE provides significant improvements.
                <context>
                    <author>We</author> 
                    <kw>achieve</kw> 
                    <posfeature>competitive performance</posfeature>
                    <kw>in comparison to</kw>
                    <method>alternate model families</method>, in particular generative models such as MRFs trained with EM (<cite id="6" function="con" polarity="neg">Haghighi and Klein, 2006</cite>) and HMMs trained with soft constraints (<cite id="7" function="con" polarity="neg">Chang et al., 2007</cite>). 
                </context>
                
                Finally, in Section 5.3 we show that feature-labeling can lead to dramatic reductions in the annotation time that is required in order to achieve the same level of accuracy as traditional instance-labeling.
            </paragraph>
        </section>
        <section imrad="m">
            <title>
                2 Related Work
            </title>
            <paragraph>
                <context>
                    <kw>There has been</kw>
                    <posfeature>a significant amount of work</posfeature> 
                    <kw>on</kw> 
                    <field>semi-supervised learning</field> with small amounts of fully labeled data (see <cite id="8" function="use" polarity="pos">Zhu (2005)</cite>).
                </context>
                <context>
                    <kw>However there has been comparatively</kw>
                    <negfeature>less work </negfeature> 
                    <kw>on</kw> 
                    <task>learning from alternative forms</task> of labeled resources. <kw>One example</kw>
                    <kw>is</kw> 
                    <cite id="9" function="use" polarity="neg">Schapire et al. (2002)</cite> 
                </context>
                who present a method in which features are annotated with their associated majority labels and this information is used to bootstrap a parameterized text classification model. Unlike the model presented in this paper, they require some labeled data in order to train their model.
            </paragraph>
            <paragraph>
                <context>
                    <kw>This type of</kw> 
                    <data>input information (features + majority label)</data> 
                    <kw>is</kw> 
                    <posfeature>a powerful and flexible model</posfeature> for specifying alternative inputs to a classifier, <kw>and has been additionally used by</kw>  
                    <cite id="10" function="use" polarity="pos" >Haghighi and Klein (2006)</cite>. 
                </context>
                
                In that work, "prototype" features—words with their associated labels—are used to train a generative MRF sequence model. Their probability model can be formally described as:
            </paragraph>
            <paragraph>
                Although the partition function must be computed over all ( x, y) tuples, learning via EM in this model is possible because ofapproximations made in computing the partition function.
            </paragraph>
            <paragraph>
                Another way to gather supervision is by means of prior label distributions. 
                <context>
                    <cite id="11" function="use" polarity="pos"> Mann and McCallum (2007)</cite> 
                    <kw>introduce> a special case of</kw> 
                    <task>GE, label regular-ization,</task> 
                    <kw>and demonstrate</kw>
                    <posfeature>its effectiveness</posfeature> for training maximum entropy classifiers. 
                </context>
                In label regu-larization, the model prefers parameter settings in which the model's predicted label distribution on the unsupervised data match a target distribution. Note that supervision here consists of the the full distribution over labels (i.e. conditioned on the maximum entropy "default feature"), instead of simply the majority label. 
                <context>
                    <cite id="12" function="use" polarity="neu">Druck et al. (2007)</cite> 
                    <kw>also use</kw>
                    <method>GE</method> with full distributions <kw>for</kw> 
                    <task>semi-supervised learning of maximum entropy models</task>, except here the distributions are on labels conditioned on features. 
                </context>
                In Section 4 we describe how GE criteria can be applied to CRFs given conditional probability distributions of labels given features.
            </paragraph>
            <paragraph>
                <context>
                    <kw>Another recent</kw>
                    <method>method</method> 
                    <kw>that has been proposed for</kw> 
                    <task>training sequence models</task> with constraints is <cite id="13" function="use" polarity="neu">Chang et al. (2007)</cite>. 
                </context>
                
                They use constraints for approximate EM training of an HMM, incorporating the constraints by looking only at the top K most-likely sequences from a joint model of likelihood and the constraints. This model can be applied to the combination of labeled and unlabeled instances, but cannot be applied in situations where only labeled features are available. Additionally, our model can be easily combined with other semi-supervised criteria, such as entropy regularization. Finally, their model is a generative HMM which cannot handle the rich, non-independent feature sets that are available to a CRF.
            </paragraph>
            <paragraph>
                There have been relatively few different approaches to CRF semi-supervised training.
                <context>
                    <method>One approach</method> 
                    <kw>has been that proposed in</kw> both <cite id="14" function="use" polarity="neu">Miller et al. (2004)</cite> and <cite id="15" function="use" polarity="neu">Freitag (2004)</cite>, <kw>uses</kw> 
                    <method>distributional clustering</method> 
                    <kw>to</kw> 
                    <task>induce features from a large corpus</task>, and then uses these features to augment the feature space of the labeled data.
                </context>
                Since this is an orthogonal method for improving accuracy it can be combined with many of the other methods discussed above, and indeed we have obtained positive preliminary experimental results with GE criteria (not reported on here).
            </paragraph>
            <paragraph>
                <context>
                    <method>Another method</method> 
                    <kw>for</kw> 
                    <task>semi-supervised CRF training</task> 
                    <kw>is</kw> 
                    <method>entropy regularization</method>, <kw>initially proposed by</kw>  
                    <cite id="16" function="use" polarity="neu">Grandvalet and Bengio (2004)</cite> and extended to linear-chain CRFs by <cite id="17" function="use" polarity="neu">Jiao et al. (2006)</cite>. 
                </context>
                
                In this formulation, the traditional label likelihood (on supervised data) is augmented with an additional term that encourages the model to predict low-entropy label distributions on the unlabeled data: O(6; D,U )= log Pe (y(d) \!x(d)) - AH (y\!x). This method can be quite brittle, since the minimal entropy solution assigns all of the tokens the same label. In general, entropy regularization is fragile, and accuracy gains can come only with precise settings of A.
                <context>
                    High values of A fall into the minimal entropy trap, while low values of A have no effect on the model (see (<cite id="18" function="ack" polarity="neu">Jiao et al., 2006</cite>) for an example).
                </context>
            </paragraph>
            <paragraph>
                <context>
                    When some instances have partial labelings (i.e. labels for some of their tokens), it is possible to train CRFs via expected gradient methods (<cite id="19" function="ack" polarity="neu">Salakhutdinov et al., 2003</cite>).
                </context>
                Here a reformulation is presented in which the gradient is computed for a probability distribution with a marginalized hidden variable, z, and observed training labels y: -Yl p(z,y\x; 6)fk (x,y,z). In essence, this resembles the standard gradient for the CRF, except that there is an additional marginal-ization in the first term over the hidden variable z. 
                <context>
                    <method>This type of training </method> 
                    <kw>has been applied by</kw> 
                    <cite id="20" function="use" polarity="neu">Quattoni et al. (2007)</cite> 
                    <kw>for</kw> 
                    <method>hidden-state conditional random fields</method>, and can be equally applied to semi-supervised conditional random fields.
                </context>

                Note, however, that labeling variables of a structured instance (e.g. tokens) is different than labeling features—being both more coarse-grained and applying supervision narrowly only to the individual subpart, not to all places in the data where the feature occurs. In the experiments in this paper, we use A = 0.001, which we tuned for best performance on the test set, giving an unfair advantage to our competitor.
            </paragraph>
            <paragraph>
                <context>
                    Finally, <kw>there are</kw> 
                    <method>some methods</method> 
                    <kw>that use</kw> 
                    <task>auxiliary tasks for training</task> sequence models, though they do not train linear-chain CRFs per se.  <cite id="21" function="use" polarity="neu">Ando and Zhang (2005)</cite> include a cluster discovery step into the supervised training. 
                </context>
                <context>
                    <cite id="22" function="use" polarity="neu">Smith and Eisner (2005)</cite> 
                    <kw>use</kw> 
                    <concept>neighborhoods of related instances</concept> 
                    <kw>to</kw> 
                    <task>figure out what makes found instances "good.</task> Although these methods can often find good solutions, both are quite sensitive to the selection of auxiliary information, and making good selections requires significant in-sight.
                </context>
            </paragraph>
      
            <title>
                3 Conditional Random Fields
            </title>
            <paragraph>
                Linear-chain conditional random fields (CRFs) are a discriminative probabilistic model over sequences x of feature vectors and label sequences y = (y1..yn), where \!x\! = \!y\! = n, and each label yi has s different possible discrete values. This model is analogous to maximum entropy models for structured outputs, where expectations can be efficiently calculated by dynamic programming. For a linear-chain CRF of Markov order one: where Fk(x^y) = Ei fk(x,yi,yi+l,i),and the partition function Z (x) = Ey exp(Ek QkFk(x, y)). Given training data D = ((x(1), y(1)).. (x(ra), y(ra))>, the model is traditionally trained by maximizing the log-likelihood O(6; D) = Y^d logpe(y(d) \!x(d)) by gradient ascent where the gradient of the likelihood is: Thesecondterm(theexpectedcounts ofthefeatures given the model) can be computed in a tractable amount of time, since according to the Markov assumption, the feature expectations can be rewritten: Often these are more complicated than picking informative features as proposed in this paper. 
                <context>
                    <kw>One example of </kw> 
                    <method>the kind of operator</method> 
                    <kw>used is</kw> the <method>transposition operator</method> 
                    <kw>proposed by</kw> 
                    <cite id="23" function="use" polarity="neu"> Smith and Eisner (2005)</cite>. i yi,yi+i A dynamic program (the forward/backward algorithm) then computes in time O(ns) all the needed probabilities pe(yi,yi+1), where n is the sequence length, and s is the number of labels.
                </context>
            </paragraph>
        
            <title>
                4 Generalized Expectation Criteria for Conditional Random Fields
            </title>
            <paragraph>
                Prior semi-supervised learning methods have augmented a limited amount of fully labeled data with either unlabeled data or with constraints (e.g. features marked with their majority label). GE criteria can use more information than these previous methods. In particular GE criteria can take advantage of conditional probability distributions of labels given a feature (p(yfk(x) = 1)). This information provides richer constraints to the model while remaining easily interpretable. People have good intuitions about the relative predictive strength of different features. For example, it is clear that the probability of label pe rs on given the feature Word=john is high, perhaps around 0.95, where as for Word=brown it would be lower, perhaps 0.4. These distributions need not be not estimated with great precision—it is far better to have the freedom to express shades of gray than to be force into a binary supervision signal. Another advantage of using conditional probability distributions as probabilistic constraints is that they can be easily estimated from data. For the feature initial-capital, we identify all tokens with the feature, and then count the labels with which the feature co-occurs.
            </paragraph>
            <paragraph>
                GE criteria attempt to match these conditional probability distributions by model expectations on unlabeled data, encouraging, for example, the model to predict that the proportion of the label person given the word "john" should be . 95 over all of the unlabeled data.
            </paragraph>
            <paragraph> 
                <context>
                    In general, a GE (generalized expectation) criterion (<cite id="24" function="ack" polarity="neu">McCallum et al., 2007</cite>) expresses a preference on the value of a model expectation. 
                </context>
                
                One kind of preference may be expressed by a distance function A, a target expectation f, data D, a function f, and a model distribution pe, the GE criterion objective function term is A f, E[f (x)]j. For the purposes of this paper, we set the functions to be conditional probability distributions and set A(p,q) = D(p\!\!q), the KL-divergence between two distributions. For semi-supervised training of CRFs, we augment the objective function with the regularization term: - AD(pHPe), where P is given as a target distribution and Um x€Um j* with the unnormalized potential where fm(x,j) is a feature that depends only on the observation sequence x, and j * is defined as {j : fm(x,j) = 1}, and Um is the set of sequences where fm(x, j) is present for some j. Computing the Gradient To compute the gradient of the GE criteria, D(p\! \!pe), first we drop terms that are constant with respect to the partial derivative, and we derive the gradient as follows: ST^ ~ \ ^ P d _where y-j = (y1.. (j-1)y(j+1).. „). The last step follows from the definition of the marginal probability P(yj \!x). Now that we have a familiar form in which we are taking the gradient of a particular label sequence, we can continue: We are actively investigating different choices of distance functions which may have different generalization properties. 4 This formulation assumes binary features. i qe x€U i yi,yi+i -y qtYY y fk (x,yi,yi+l,i) After combining terms and rearranging we arrive at the final form of the gradient: x€U i yi,yi+i i Here, the second term is easily gathered from forward/backward, but obtaining the first term is somewhat more complicated.
            </paragraph>
            <paragraph>
                Computing this term naively would require multiple runs of constrained forward/backwar d. Here we present a more efficient method that requires only one run of for-ward/backward. First we decompose the probability into two parts: Y,j* Pe(yi,yi+1,yj* = l\!x) = Ej=1 pe(yi,yi+1,yj = l\!x)I (j e j*) + E/=i+1 pe(yi,yi+1,yj = l\!x)I (j e Next, weshow how to compute these terms efficiently. 
                <context>
                    Similar to forward/backward, <author>we</author> 
                    <kw>build a</kw> 
                    <data>lattice of intermediate results</data> 
                    <kw>that then can be used to</kw> 
                    <task>calculate</task> the (<cite id="25" function="ack" polarity="neu">Kakade et al., 2002</cite>) propose a related method that computes = = I).
                </context>
                quantity of interest: For efficiency, EW-1Ej=1 pe(yi-1,yi,yj = l\!x)I (j e j*) is saved at each stage in the lattice E /=i+1 pe(yi-1,yi,yj = l\!x)I(j e j*) canbe computed in the same fashion. To compute the lattices it takes time O(ns), and one lattice must be computed for each label so the total time is O(ns).
            </paragraph>
        </section>
        <section imrad="r">
            <title>
                5 Experimental Results
            </title>
            <paragraph>
                <context>
                    <author>We</author> 
                    <kw>use</kw>
                    <data>the classifieds data </data> 
                    <kw>provided by</kw> 
                    <cite id="26" function="bas" polarity="neu">Grenager et al. (2005)</cite> and compare with results reported features along with their majority labels, these are the primary set of additional constraints (Table 1).
                </context>
                As HK06 notes, these features are selected using statistics of the labeled data, and here we used similar features here in order to compare with previous results. 
               
                Though in practice we have found that feature selection is often intuitive, 
                <context>
                    <kw>recent work </kw> 
                    <kw>has experimented with</kw> 
                    <method>automatic feature selection</method> using LDA (<cite id="27" function="use" polarity="neu">Druck et al., 2008</cite>).
                </context>
                For some of the experiments we also use two sets of 33 additional features that we chose by the same method as HK06, the first 33 of which are also shown in Table 1. We use the same tokenization of the dataset as HK06, and training/test/unsupervised sets of 100 instances each. This data differs slightly from the tokenization used by CRR07. In particular it lacks the newline breaks which might be a useful piece of information.
            </paragraph>
            <paragraph>
                There are three types of supervised/semi-supervised data used in the experiments. Labeled instances are the traditional or conventionally Table 1: Features and their associated majority label. Features for each label were chosen by the method described in HK06 - top frequency for that label and not higher frequency for any other label. Table 2: Accuracy of semi-supervised learning methods with majority labeled features alone. GE outperforms HK06 when neither model has access to SVD features. When SVD features are included, HK06 has an edge in accuracy. labeled instances used for estimation in traditional CRF training. Majority labeled features are features annotated with their majority label. Labeled features are features m where the distribution p(yi\!fm(x, i)) has been specified. In Section 5.3 we estimate these distributions from isolated labeled tokens.
            </paragraph>
            <paragraph>
                We evaluate the system in two scenarios: (1) with feature constraints alone and (2) feature constraints in conjunction with a minimal amount of labeled instances. There is little prior work that demonstrates the use of both scenarios; CRR07 can only be applied when there is some labeled data, while HK06 could be applied in both scenarios though there are no such published experiments.
            </paragraph>
            
                
                5.1 Majority Labeled Features Only
                
                <paragraph>
                    When using majority labeled features alone, it can be seen in Table 2 that GE is the best performing method. This is important, as it demonstrates that GE out of the box can be used effectively, without tuning and extra modifications. While HK06 and CRR07 require only majority labeled features, GE criteria use conditional probability distributions of labels given features, and so in order to apply GE we must decide on a particular distribution for each feature constraint. In sections 5.1 and 5.2 we use a simple heuristic to derive distributions from majority label information: we assign . 99 probability to the majority label of the feature and divide the remaining probability uniformly among the remainder of the labels. Table 3: Accuracy of semi-supervised learning methods with constraints and limited amounts of training data. Even though CRR07 uses more constraints and requires additional development data for estimating mixture weights, GE still outperforms CRR07 when that system is run without applying constraints during inference. When these constraints are applied during test-time inference, CRR07 has an edge over the CRF trained with GE criteria.
                </paragraph>
                <paragraph>
                    In their original work, HK06 propose a method for generating additional features given a set of"pro-totype" features (the feature constraints in Table 1), which they demonstrate to be highly effective. In their method, they collect contexts around all words in the corpus, then perform a SVD decomposition. They take the first 50 singular values for all words, and then if a word is within a thresholded distance to a prototype feature, they assign that word a new feature which indicates close similarity to a prototype feature. When SVD features such as these are made available to the systems, HK06 has a higher accuracy. For the remainder of the experiments we use the SVD feature enhanced data sets.
                </paragraph>
                <paragraph>
                    We ran additional experiments with expected gradient methods but found them to be ineffective, reaching around 50% accuracy on the experiments with the additional SVD features, around 20% less than the competing methods.
                </paragraph>
           
                
                5.2 Majority Labeled Features and Labeled Instances
                
                <paragraph>
                    Labeled instances are available, the technique described in CRR07 can be used. While CRR07 is run on the same data set as used by HK06, a direct comparison is problematic. First, they use additional constraints beyond those used in this paper and those used by HK06 (e.g. each contiguous label sequence must be at least 3 labels long)—so their results cannot be directly compared. Second, they require additional training data to estimate weights for their soft constraints, and do not measure how much of this additional data is needed. Third, they use a slightly different tokenization procedure. Fourth, CRR07 uses different subsets of labeled training instances than used here. For these reasons, the comparison between the method presented here and CRR07 cannot be exact. We generated our own set of SVD features, so they might not match exactly the SVD features described in HK06. One further experiment HK06 performs which we do not duplicate here is post-processing the label assignments to better handle field boundaries. With this addition they realize another 2.5% improvement.
                </paragraph>
                <paragraph>
                    The technique described in CRR07 can be applied in two ways: constraints can be applied during learning, and they can also be applied during inference. We present comparisons with both of these systems in Table 3. CRFs trained with GE criteria consistently outperform CRR07 when no constraints are applied during inference time, even though CRR07 has additional constraints. When the method in CRR07 is applied with constraints in inference time, it is able to outperform CRFs trained with GE. We tried adding the additional constraints described in CRR07 during test-time inference in our system, but found no accuracy improvement. After doing error inspection, those additional constraints weren't frequently violated by the GE trained method, which also suggests that adding them wouldn't have a significant effect during training either. It is possible that for GE training there are alternative inference-time constraints that would improve performance, but we didn't pursue this line of investigation as there are benefits to operating within a formal probabilistic model, and eschewing constraints applied during inference time. Without these constraints, probabilistic models can be combined easily with one another in order to arrive at a joint model, and adding in these constraints at inference time complicates the nature of the combination.
                </paragraph>
            
                
                5.3 Labeled Features vs. Labeled Instances
                
                <paragraph>
                    In the previous section, the supervision signal was the majority label of each feature. Given a feature of interest, a human can gather a set of tokens that have this feature and label them to discover the cor-It is not clear how these features would be tagged with majority label in a real use case. Tagging data to discover the majority label could potentially require a large number of tagged instances before the majority label was definitively identified. Traditional Instance Labeling -33 Labeled Features -66 Labeled Features -99 Labeled Features CRRQ7 + inference ^ tjnte constraints Figure 2: Accuracy of supervised and semi-supervised learning methods for fixed numbers of labeled tokens. Training a GE model with only labeled features significantly outperforms traditional log-likelihood training with labeled instances for comparable numbers of labeled tokens. When training on less than 1500 annotated tokens, it also outperforms CRR07 + inference time constraints, which uses not only labeled tokens but additional constraints and development data for estimating mixture weights. Table 4: Accuracy of semi-supervised learning methods comparing the effects of (1) a heuristic for setting conditional distributions of labels given features and (2) estimating this distributions via human annotation. When GE is given feature distributions are better than the simple heuristic it is able to realize considerable gains. relation between the feature and the labels. While the resulting label distribution information could not be fully utilized by previous methods (HK06 and CRR07 use only the majority label of the word), it can, however, be integrated into the GE criteria by using the distribution from the relative proportions of labels rather than a the previous heuristic distribution.We present a series of experiments that test the advantages of this annotation paradigm.
                </paragraph>
                <paragraph>
                    To simulate a human labeler, we randomly sample (without replacement) tokens with the particular feature in question, and generate a label using the human annotations provided in the data. Then we normalize and smooth the raw counts to obtain a conditional probability distribution over labels given feature. We experiment with samples of 1, 2,5, 10, 100 tokens per feature, as well as with all available labeled data. We sample instances for labeling exclusively from the training and development data, not from the testing data. We train a model using GE with these estimated conditional probability distributions and compare them with corresponding numbers of tokens of traditionally labeled instances. In this paper we observe a 10x speed-up by using isolated labeled tokens instead of a wholly labeled instances—so even if it takes slightly longer to label isolated tokens, there will still be a substantial gain.
                </paragraph>
                <paragraph>
                    Training from labeled features significantly outperforms training from traditional labeled instances for equivalent numbers of labeled tokens (Figure 2). With 1000 labeled tokens, instance-labeling achieves accuracy around 65%, while labeling 33 features reaches 72% accuracy. To achieve the same level of performance as traditional instance labeling, it can require as much as a factor of ten-fold fewer annotations of feature occurrences. For example, the accuracy achieved after labeling 257 tokens of 33 features is 71% - the same accuracy achieved only after labeling more than 2000 tokens in traditional instance-labeling.
                </paragraph>
                <paragraph>
                    Assuming that labeling one token in isolation takes the same time as labeling one token in a sequence, these results strongly support a new paradigm of labeling in which instead of annotating entire sentences, the human instead selects some key features of interest and labels tokens that have this feature. Particularly intriguing is the flexibility our scenario provides for the selection of "features of interest" to be driven by error analysis.
                </paragraph>
                <paragraph>
                    Table 4 compares the heuristic method described above against sampled conditional probability distributions of labels given features. Sampled distributions yield consistent improvements over the heuristic method. The accuracy with no labeled instances (73.0%) is better than HK06 (71.5%), which demonstrates that the precisely estimated feature distributions are helpful for improving accuracy.
                </paragraph>
                <paragraph>
                    Though accuracy begins to level off with distri- Labeling 99 features with 1000 tokens reaches nearly 76%. Accuracy at one labeled token per feature is much worse than accuracy with majority label information. This due to the noise introduced by sampling, as there is the potential for a relatively rare label be sampled and labeled, and thereby train the system on a non-canonical supervision signal. Where the tokens labeled is the total available number in the data, roughly 2500 tokens. Figure 3: From left to right: distributions (with standard error) for the feature Word=address obtained from sampling, using 1 sample per feature and 10 samples per feature. Labels 1, 2, 3, and 9 are (respectively) features, contact, size, and address. Instead of more precisely estimating these distributions, it is more beneficial to label a larger set of features. butions over the original set of 33 labeled features, we ran additional experiments with 66 and 99 labeled features, whose results are also shown in Figure 2. The graph shows that with an increased number of labeled features, for the same numbers of labeled tokens, accuracy can be improved. The reason behind this is clear—while there is some gain from increased precision of probability estimates (as they asymptotically approach their "true" values as shown in Figure 3), there is more information to be gained from rougher estimates of a larger set of features. One final point about these additional features is that their distributions are less peaked than the original feature set. Where the original feature set distribution has entropy of 8.8, the first 33 added features have an entropy of 22.95. Surprisingly, even ambiguous feature constraints are able to improve accuracy.
                </paragraph>
            
        </section>
        <section imrad="d">
            <title>
                6 Conclusion
            </title>
            <paragraph> We have presented generalized expectation criteria for linear-chain conditional random fields, a new semi-supervised training method that makes use of labeled features rather than labeled instances. Previous semi-supervised methods have typically used ad-hoc feature majority label assignments as constraints. Our new method uses conditional probability distributions of labels given features and can dramatically reduce annotation time. When these distributions are estimated by means of annotated feature occurrences in context, there is as much as a ten-fold reduction in the annotation time that is required in order to achieve the same level ofaccuracy over traditional instance-labeling. Also note that for less than 1500 tokens of labeling, the 99 labeled features outperform CRR07 with inference time constraints. 
            </paragraph>
        </section>
    </paper>
</annotatedpaper>